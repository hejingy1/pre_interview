{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  id: \"mapmarker\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1);\n}","map":{"version":3,"names":["id","_createElementBlock","_hoisted_1"],"sources":["/home/hejingyuan10/pre-int/interview/src/components/MapMarker.vue"],"sourcesContent":["<template>\n    <div id=\"mapmarker\"></div>\n  </template>\n  \n  <style>\n  #map {\n    height: 400px;\n    width: 100%;\n  }\n  </style>\n\n\n<script>\nexport default {\n  data() {\n    return {\n      map: null,\n      marker: null,\n    };\n  },\n  mounted() {\n    this.initializeMap();\n  },\n  methods: {\n    initializeMap() {\n      // Initialize the map\n      this.map = new google.maps.Map(document.getElementById('map'), {\n        center: { lat: 0, lng: 0 },\n        zoom: 10,\n      });\n    },\n    showLocationOnMap(locationName) {\n      // Geocode the location name to get its coordinates\n      const geocoder = new google.maps.Geocoder();\n      geocoder.geocode({ address: locationName }, (results, status) => {\n        if (status === google.maps.GeocoderStatus.OK && results.length > 0) {\n          const location = results[0].geometry.location;\n          // Center the map on the location coordinates\n          this.map.setCenter(location);\n          // Add a marker on the location\n          this.marker = new google.maps.Marker({\n            position: location,\n            map: this.map,\n          });\n        } else {\n          console.log('Geocode was not successful for the following reason:', status);\n        }\n      });\n    },\n  },\n  watch: {\n    $route(to) {\n      // Watch for changes in the route to update the map based on the location parameter\n      const locationName = to.query.location;\n      if (locationName) {\n        this.showLocationOnMap(locationName);\n      }\n    },\n  },\n};\n</script>\n"],"mappings":";;EACSA,EAAE,EAAC;AAAW;;uBAAnBC,mBAAA,CAA0B,OAA1BC,UAA0B"},"metadata":{},"sourceType":"module","externalDependencies":[]}