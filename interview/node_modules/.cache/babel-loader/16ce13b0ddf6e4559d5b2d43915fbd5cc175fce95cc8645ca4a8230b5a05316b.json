{"ast":null,"code":"import { mapMutations, mapState } from 'vuex';\nexport default {\n  name: 'App',\n  store,\n  data() {\n    return {\n      // center: {lat: 43.65, lng: -79.38},\n      currentPlace: null\n      // markers: [],\n      // places: [],\n    };\n  },\n\n  computed: {\n    ...mapState(['storeC', 'storeM', 'storeP']),\n    center() {\n      return storeC;\n    },\n    markers() {\n      return storeM;\n    },\n    places() {\n      return storeP;\n    }\n  },\n  methods: {\n    ...mapMutations(['addMarkers', 'addMarkers', 'addMarkers']),\n    setPlace(place) {\n      this.currentPlace = place;\n    },\n    addMarker() {\n      if (this.currentPlace) {\n        const marker = {\n          lat: this.currentPlace.geometry.location.lat(),\n          lng: this.currentPlace.geometry.location.lng()\n        };\n        store.commit('addMarkers', marker);\n        store.commit('addPlaces', this.currentPlace);\n        store.commit('changeCenter', marker);\n        // this.markers.push({ position: marker });\n        // this.places.push(this.currentPlace);\n        // this.center = marker;\n        this.currentPlace = null;\n      }\n    },\n    geolocate: function () {\n      navigator.geolocation.getCurrentPosition(position => {\n        const current = {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        };\n        store.commit('addMarkers', current);\n        store.commit('changeCenter', current);\n        // this.markers.push({position:current});\n        // this.center = current;\n      });\n    }\n  }\n};","map":{"version":3,"names":["mapMutations","mapState","name","store","data","currentPlace","computed","center","storeC","markers","storeM","places","storeP","methods","setPlace","place","addMarker","marker","lat","geometry","location","lng","commit","geolocate","navigator","geolocation","getCurrentPosition","position","current","coords","latitude","longitude"],"sources":["/home/hejingyuan10/pre-int/interview/src/components/MapMarker.vue"],"sourcesContent":["<template>\n  <GMapAutocomplete\n    placeholder=\"Enter an location\"\n    @place_changed='setPlace'\n    style=\"width: 300px; height: 30%\"\n  >\n  </GMapAutocomplete>\n  <button\n      @click='addMarker'>Add\n  </button>\n  <button @click=\"geolocate\">Get Current Location</button>\n  <GMapMap\n      :center=\"center\"\n      :zoom=\"15\"\n      map-type-id=\"terrain\"\n      style=\"width: 100%; height: 300px\" \n  >\n    <GMapMarker\n      v-for=\"marker in markers\"\n      :key=\"marker.id\"\n      :position=\"marker.position\"\n    />\n  </GMapMap>\n</template>\n<script>\n\nimport { mapMutations, mapState } from 'vuex';\nexport default {\n  name: 'App',\n  store,\n  data() {\n    return {\n      // center: {lat: 43.65, lng: -79.38},\n      currentPlace: null,\n      // markers: [],\n      // places: [],\n    }\n  },\n  computed: {\n    ...mapState(['storeC', 'storeM', 'storeP']),\n    center (){\n      return storeC\n    },\n    markers () {\n      return storeM\n    },\n    places (){\n      return storeP\n    },\n  },  \n  methods: {\n  ...mapMutations(['addMarkers', 'addMarkers', 'addMarkers']),\n  setPlace(place) {\n    this.currentPlace = place;\n  },\n  addMarker() {\n      if (this.currentPlace) {\n        const marker = {\n          lat: this.currentPlace.geometry.location.lat(),\n          lng: this.currentPlace.geometry.location.lng(),\n        };\n        \n        store.commit('addMarkers', marker)\n        store.commit('addPlaces', this.currentPlace)\n        store.commit('changeCenter', marker)\n        // this.markers.push({ position: marker });\n        // this.places.push(this.currentPlace);\n        // this.center = marker;\n        this.currentPlace = null;\n      }\n    },\n  geolocate: function() {\n    navigator.geolocation.getCurrentPosition(position => {  \n      const current = {\n        lat: position.coords.latitude, lng: position.coords.longitude,\n      }\n      store.commit('addMarkers', current)\n      store.commit('changeCenter', current)\n      // this.markers.push({position:current});\n      // this.center = current;\n    });\n  },\n},\n}\n</script>"],"mappings":"AA0BA,SAASA,YAAY,EAAEC,QAAO,QAAS,MAAM;AAC7C,eAAe;EACbC,IAAI,EAAE,KAAK;EACXC,KAAK;EACLC,IAAIA,CAAA,EAAG;IACL,OAAO;MACL;MACAC,YAAY,EAAE;MACd;MACA;IACF;EACF,CAAC;;EACDC,QAAQ,EAAE;IACR,GAAGL,QAAQ,CAAC,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;IAC3CM,MAAKA,CAAA,EAAI;MACP,OAAOC,MAAK;IACd,CAAC;IACDC,OAAMA,CAAA,EAAK;MACT,OAAOC,MAAK;IACd,CAAC;IACDC,MAAKA,CAAA,EAAI;MACP,OAAOC,MAAK;IACd;EACF,CAAC;EACDC,OAAO,EAAE;IACT,GAAGb,YAAY,CAAC,CAAC,YAAY,EAAE,YAAY,EAAE,YAAY,CAAC,CAAC;IAC3Dc,QAAQA,CAACC,KAAK,EAAE;MACd,IAAI,CAACV,YAAW,GAAIU,KAAK;IAC3B,CAAC;IACDC,SAASA,CAAA,EAAG;MACR,IAAI,IAAI,CAACX,YAAY,EAAE;QACrB,MAAMY,MAAK,GAAI;UACbC,GAAG,EAAE,IAAI,CAACb,YAAY,CAACc,QAAQ,CAACC,QAAQ,CAACF,GAAG,CAAC,CAAC;UAC9CG,GAAG,EAAE,IAAI,CAAChB,YAAY,CAACc,QAAQ,CAACC,QAAQ,CAACC,GAAG,CAAC;QAC/C,CAAC;QAEDlB,KAAK,CAACmB,MAAM,CAAC,YAAY,EAAEL,MAAM;QACjCd,KAAK,CAACmB,MAAM,CAAC,WAAW,EAAE,IAAI,CAACjB,YAAY;QAC3CF,KAAK,CAACmB,MAAM,CAAC,cAAc,EAAEL,MAAM;QACnC;QACA;QACA;QACA,IAAI,CAACZ,YAAW,GAAI,IAAI;MAC1B;IACF,CAAC;IACHkB,SAAS,EAAE,SAAAA,CAAA,EAAW;MACpBC,SAAS,CAACC,WAAW,CAACC,kBAAkB,CAACC,QAAO,IAAK;QACnD,MAAMC,OAAM,GAAI;UACdV,GAAG,EAAES,QAAQ,CAACE,MAAM,CAACC,QAAQ;UAAET,GAAG,EAAEM,QAAQ,CAACE,MAAM,CAACE;QACtD;QACA5B,KAAK,CAACmB,MAAM,CAAC,YAAY,EAAEM,OAAO;QAClCzB,KAAK,CAACmB,MAAM,CAAC,cAAc,EAAEM,OAAO;QACpC;QACA;MACF,CAAC,CAAC;IACJ;EACF;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}