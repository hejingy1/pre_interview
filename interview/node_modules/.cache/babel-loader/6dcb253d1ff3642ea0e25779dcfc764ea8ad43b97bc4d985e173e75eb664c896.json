{"ast":null,"code":"export default {\n  data() {\n    return {\n      map: null,\n      marker: null\n    };\n  },\n  mounted() {\n    this.initializeMap();\n  },\n  methods: {\n    initializeMap() {\n      // Initialize the map after Google Maps API has loaded\n      window.initMap = this.showLocationOnMap;\n      const script = document.createElement('script');\n      script.src = `https://maps.googleapis.com/maps/api/js?key=YOUR_GOOGLE_MAPS_API_KEY&callback=initMap`;\n      script.defer = true;\n      script.async = true;\n      document.head.appendChild(script);\n    },\n    showLocationOnMap(locationName) {\n      // Geocode the location name to get its coordinates\n      const geocoder = new google.maps.Geocoder();\n      geocoder.geocode({\n        address: locationName\n      }, (results, status) => {\n        if (status === google.maps.GeocoderStatus.OK && results.length > 0) {\n          const location = results[0].geometry.location;\n          // Center the map on the location coordinates\n          this.map = new google.maps.Map(document.getElementById('map'), {\n            center: location,\n            zoom: 10\n          });\n          // Add a marker on the location\n          this.marker = new google.maps.Marker({\n            position: location,\n            map: this.map\n          });\n        } else {\n          console.log('Geocode was not successful for the following reason:', status);\n        }\n      });\n    }\n  },\n  watch: {\n    $route(to) {\n      // Watch for changes in the route to update the map based on the location parameter\n      const locationName = to.query.location;\n      if (locationName) {\n        this.showLocationOnMap(locationName);\n      }\n    }\n  }\n};","map":{"version":3,"names":["data","map","marker","mounted","initializeMap","methods","window","initMap","showLocationOnMap","script","document","createElement","src","defer","async","head","appendChild","locationName","geocoder","google","maps","Geocoder","geocode","address","results","status","GeocoderStatus","OK","length","location","geometry","Map","getElementById","center","zoom","Marker","position","console","log","watch","$route","to","query"],"sources":["/home/hejingyuan10/pre-int/interview/src/components/MapMarker.vue"],"sourcesContent":["<template>\n  <div id=\"map\"></div>\n</template>\n\n<style>\n#map {\n  height: 400px;\n  width: 100%;\n}\n</style>\n\n<script>\nexport default {\n  data() {\n    return {\n      map: null,\n      marker: null,\n    };\n  },\n  mounted() {\n    this.initializeMap();\n  },\n  methods: {\n    initializeMap() {\n      // Initialize the map after Google Maps API has loaded\n      window.initMap = this.showLocationOnMap;\n      const script = document.createElement('script');\n      script.src = `https://maps.googleapis.com/maps/api/js?key=YOUR_GOOGLE_MAPS_API_KEY&callback=initMap`;\n      script.defer = true;\n      script.async = true;\n      document.head.appendChild(script);\n    },\n    showLocationOnMap(locationName) {\n      // Geocode the location name to get its coordinates\n      const geocoder = new google.maps.Geocoder();\n      geocoder.geocode({ address: locationName }, (results, status) => {\n        if (status === google.maps.GeocoderStatus.OK && results.length > 0) {\n          const location = results[0].geometry.location;\n          // Center the map on the location coordinates\n          this.map = new google.maps.Map(document.getElementById('map'), {\n            center: location,\n            zoom: 10,\n          });\n          // Add a marker on the location\n          this.marker = new google.maps.Marker({\n            position: location,\n            map: this.map,\n          });\n        } else {\n          console.log('Geocode was not successful for the following reason:', status);\n        }\n      });\n    },\n  },\n  watch: {\n    $route(to) {\n      // Watch for changes in the route to update the map based on the location parameter\n      const locationName = to.query.location;\n      if (locationName) {\n        this.showLocationOnMap(locationName);\n      }\n    },\n  },\n};\n</script>\n"],"mappings":"AAYA,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,GAAG,EAAE,IAAI;MACTC,MAAM,EAAE;IACV,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,aAAa,CAAC,CAAC;EACtB,CAAC;EACDC,OAAO,EAAE;IACPD,aAAaA,CAAA,EAAG;MACd;MACAE,MAAM,CAACC,OAAM,GAAI,IAAI,CAACC,iBAAiB;MACvC,MAAMC,MAAK,GAAIC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;MAC/CF,MAAM,CAACG,GAAE,GAAK,uFAAsF;MACpGH,MAAM,CAACI,KAAI,GAAI,IAAI;MACnBJ,MAAM,CAACK,KAAI,GAAI,IAAI;MACnBJ,QAAQ,CAACK,IAAI,CAACC,WAAW,CAACP,MAAM,CAAC;IACnC,CAAC;IACDD,iBAAiBA,CAACS,YAAY,EAAE;MAC9B;MACA,MAAMC,QAAO,GAAI,IAAIC,MAAM,CAACC,IAAI,CAACC,QAAQ,CAAC,CAAC;MAC3CH,QAAQ,CAACI,OAAO,CAAC;QAAEC,OAAO,EAAEN;MAAa,CAAC,EAAE,CAACO,OAAO,EAAEC,MAAM,KAAK;QAC/D,IAAIA,MAAK,KAAMN,MAAM,CAACC,IAAI,CAACM,cAAc,CAACC,EAAC,IAAKH,OAAO,CAACI,MAAK,GAAI,CAAC,EAAE;UAClE,MAAMC,QAAO,GAAIL,OAAO,CAAC,CAAC,CAAC,CAACM,QAAQ,CAACD,QAAQ;UAC7C;UACA,IAAI,CAAC5B,GAAE,GAAI,IAAIkB,MAAM,CAACC,IAAI,CAACW,GAAG,CAACrB,QAAQ,CAACsB,cAAc,CAAC,KAAK,CAAC,EAAE;YAC7DC,MAAM,EAAEJ,QAAQ;YAChBK,IAAI,EAAE;UACR,CAAC,CAAC;UACF;UACA,IAAI,CAAChC,MAAK,GAAI,IAAIiB,MAAM,CAACC,IAAI,CAACe,MAAM,CAAC;YACnCC,QAAQ,EAAEP,QAAQ;YAClB5B,GAAG,EAAE,IAAI,CAACA;UACZ,CAAC,CAAC;QACJ,OAAO;UACLoC,OAAO,CAACC,GAAG,CAAC,sDAAsD,EAAEb,MAAM,CAAC;QAC7E;MACF,CAAC,CAAC;IACJ;EACF,CAAC;EACDc,KAAK,EAAE;IACLC,MAAMA,CAACC,EAAE,EAAE;MACT;MACA,MAAMxB,YAAW,GAAIwB,EAAE,CAACC,KAAK,CAACb,QAAQ;MACtC,IAAIZ,YAAY,EAAE;QAChB,IAAI,CAACT,iBAAiB,CAACS,YAAY,CAAC;MACtC;IACF;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}