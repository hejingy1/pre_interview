{"ast":null,"code":"import loadjs from 'loadjs';\nexport default {\n  data() {\n    return {\n      map: null,\n      marker: null\n    };\n  },\n  mounted() {\n    this.loadGoogleMapsAPI().then(() => {\n      this.initializeMap();\n    });\n  },\n  methods: {\n    loadGoogleMapsAPI() {\n      return new Promise((resolve, reject) => {\n        loadjs('https://maps.googleapis.com/maps/api/js?key=AIzaSyBhxa94GfjGZdtqllKjEoF0Uq86RAAeBpo', {\n          success: resolve,\n          error: reject\n        });\n      });\n    },\n    initializeMap() {\n      // Initialize the map\n      this.map = new google.maps.Map(document.getElementById('map'), {\n        center: {\n          lat: 0,\n          lng: 0\n        },\n        zoom: 10\n      });\n    },\n    showLocationOnMap(locationName) {\n      // Geocode the location name to get its coordinates\n      const geocoder = new google.maps.Geocoder();\n      geocoder.geocode({\n        address: locationName\n      }, (results, status) => {\n        if (status === google.maps.GeocoderStatus.OK && results.length > 0) {\n          const location = results[0].geometry.location;\n          // Center the map on the location coordinates\n          this.map.setCenter(location);\n          // Add a marker on the location\n          this.marker = new google.maps.Marker({\n            position: location,\n            map: this.map\n          });\n        } else {\n          console.log('Geocode was not successful for the following reason:', status);\n        }\n      });\n    }\n  },\n  watch: {\n    $route(to) {\n      // Watch for changes in the route to update the map based on the location parameter\n      const locationName = to.query.location;\n      if (locationName) {\n        this.showLocationOnMap(locationName);\n      }\n    }\n  }\n};","map":{"version":3,"names":["loadjs","data","map","marker","mounted","loadGoogleMapsAPI","then","initializeMap","methods","Promise","resolve","reject","success","error","google","maps","Map","document","getElementById","center","lat","lng","zoom","showLocationOnMap","locationName","geocoder","Geocoder","geocode","address","results","status","GeocoderStatus","OK","length","location","geometry","setCenter","Marker","position","console","log","watch","$route","to","query"],"sources":["/home/hejingyuan10/pre-int/interview/src/components/MapMarker.vue"],"sourcesContent":["<template>\n  <div id=\"map\"></div>\n</template>\n\n<style>\n#map {\n  height: 400px;\n  width: 100%;\n}\n</style>\n\n<script>\nimport loadjs from 'loadjs';\n\nexport default {\n  data() {\n    return {\n      map: null,\n      marker: null,\n    };\n  },\n  mounted() {\n    this.loadGoogleMapsAPI().then(() => {\n      this.initializeMap();\n    });\n  },\n  methods: {\n    loadGoogleMapsAPI() {\n      return new Promise((resolve, reject) => {\n        loadjs('https://maps.googleapis.com/maps/api/js?key=AIzaSyBhxa94GfjGZdtqllKjEoF0Uq86RAAeBpo', {\n          success: resolve,\n          error: reject,\n        });\n      });\n    },\n    initializeMap() {\n      // Initialize the map\n      this.map = new google.maps.Map(document.getElementById('map'), {\n        center: { lat: 0, lng: 0 },\n        zoom: 10,\n      });\n    },\n    showLocationOnMap(locationName) {\n      // Geocode the location name to get its coordinates\n      const geocoder = new google.maps.Geocoder();\n      geocoder.geocode({ address: locationName }, (results, status) => {\n        if (status === google.maps.GeocoderStatus.OK && results.length > 0) {\n          const location = results[0].geometry.location;\n          // Center the map on the location coordinates\n          this.map.setCenter(location);\n          // Add a marker on the location\n          this.marker = new google.maps.Marker({\n            position: location,\n            map: this.map,\n          });\n        } else {\n          console.log('Geocode was not successful for the following reason:', status);\n        }\n      });\n    },\n  },\n  watch: {\n    $route(to) {\n      // Watch for changes in the route to update the map based on the location parameter\n      const locationName = to.query.location;\n      if (locationName) {\n        this.showLocationOnMap(locationName);\n      }\n    },\n  },\n};\n</script>\n"],"mappings":"AAYA,OAAOA,MAAK,MAAO,QAAQ;AAE3B,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,GAAG,EAAE,IAAI;MACTC,MAAM,EAAE;IACV,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,iBAAiB,CAAC,CAAC,CAACC,IAAI,CAAC,MAAM;MAClC,IAAI,CAACC,aAAa,CAAC,CAAC;IACtB,CAAC,CAAC;EACJ,CAAC;EACDC,OAAO,EAAE;IACPH,iBAAiBA,CAAA,EAAG;MAClB,OAAO,IAAII,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;QACtCX,MAAM,CAAC,qFAAqF,EAAE;UAC5FY,OAAO,EAAEF,OAAO;UAChBG,KAAK,EAAEF;QACT,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC;IACDJ,aAAaA,CAAA,EAAG;MACd;MACA,IAAI,CAACL,GAAE,GAAI,IAAIY,MAAM,CAACC,IAAI,CAACC,GAAG,CAACC,QAAQ,CAACC,cAAc,CAAC,KAAK,CAAC,EAAE;QAC7DC,MAAM,EAAE;UAAEC,GAAG,EAAE,CAAC;UAAEC,GAAG,EAAE;QAAE,CAAC;QAC1BC,IAAI,EAAE;MACR,CAAC,CAAC;IACJ,CAAC;IACDC,iBAAiBA,CAACC,YAAY,EAAE;MAC9B;MACA,MAAMC,QAAO,GAAI,IAAIX,MAAM,CAACC,IAAI,CAACW,QAAQ,CAAC,CAAC;MAC3CD,QAAQ,CAACE,OAAO,CAAC;QAAEC,OAAO,EAAEJ;MAAa,CAAC,EAAE,CAACK,OAAO,EAAEC,MAAM,KAAK;QAC/D,IAAIA,MAAK,KAAMhB,MAAM,CAACC,IAAI,CAACgB,cAAc,CAACC,EAAC,IAAKH,OAAO,CAACI,MAAK,GAAI,CAAC,EAAE;UAClE,MAAMC,QAAO,GAAIL,OAAO,CAAC,CAAC,CAAC,CAACM,QAAQ,CAACD,QAAQ;UAC7C;UACA,IAAI,CAAChC,GAAG,CAACkC,SAAS,CAACF,QAAQ,CAAC;UAC5B;UACA,IAAI,CAAC/B,MAAK,GAAI,IAAIW,MAAM,CAACC,IAAI,CAACsB,MAAM,CAAC;YACnCC,QAAQ,EAAEJ,QAAQ;YAClBhC,GAAG,EAAE,IAAI,CAACA;UACZ,CAAC,CAAC;QACJ,OAAO;UACLqC,OAAO,CAACC,GAAG,CAAC,sDAAsD,EAAEV,MAAM,CAAC;QAC7E;MACF,CAAC,CAAC;IACJ;EACF,CAAC;EACDW,KAAK,EAAE;IACLC,MAAMA,CAACC,EAAE,EAAE;MACT;MACA,MAAMnB,YAAW,GAAImB,EAAE,CAACC,KAAK,CAACV,QAAQ;MACtC,IAAIV,YAAY,EAAE;QAChB,IAAI,CAACD,iBAAiB,CAACC,YAAY,CAAC;MACtC;IACF;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}