{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createBlock as _createBlock, withCtx as _withCtx } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_GMapAutocomplete = _resolveComponent(\"GMapAutocomplete\");\n  const _component_GMapMarker = _resolveComponent(\"GMapMarker\");\n  const _component_GMapMap = _resolveComponent(\"GMapMap\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"div\", null, [_createElementVNode(\"p\", null, \"UTC Offset: \" + _toDisplayString($data.utcOffset), 1 /* TEXT */), _createElementVNode(\"p\", null, \"Time Zone: \" + _toDisplayString($data.timeZone), 1 /* TEXT */)]), _createVNode(_component_GMapAutocomplete, {\n    placeholder: \"Enter an location\",\n    onPlace_changed: $options.setPlace,\n    style: {\n      \"width\": \"300px\",\n      \"height\": \"30%\"\n    }\n  }, null, 8 /* PROPS */, [\"onPlace_changed\"]), _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.addMarker && $options.addMarker(...args))\n  }, \"Add \"), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.geolocate && $options.geolocate(...args))\n  }, \"Get Current Location\"), _createVNode(_component_GMapMap, {\n    center: $options.center,\n    zoom: 15,\n    \"map-type-id\": \"terrain\",\n    style: {\n      \"width\": \"100%\",\n      \"height\": \"300px\"\n    }\n  }, {\n    default: _withCtx(() => [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.markers, marker => {\n      return _openBlock(), _createBlock(_component_GMapMarker, {\n        key: marker.id,\n        position: marker.position\n      }, null, 8 /* PROPS */, [\"position\"]);\n    }), 128 /* KEYED_FRAGMENT */))]),\n\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"center\"])], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["_createElementVNode","_toDisplayString","$data","utcOffset","timeZone","_createVNode","_component_GMapAutocomplete","placeholder","onPlace_changed","$options","setPlace","style","onClick","_cache","args","addMarker","geolocate","_component_GMapMap","center","zoom","_createElementBlock","_Fragment","_renderList","markers","marker","_createBlock","_component_GMapMarker","key","id","position"],"sources":["/home/hejingyuan10/pre-int/interview/src/components/MapMarker.vue"],"sourcesContent":["<template>\n  <div>\n    <p>UTC Offset: {{ utcOffset }}</p>\n    <p>Time Zone: {{ timeZone }}</p>\n  </div>\n  <GMapAutocomplete\n    placeholder=\"Enter an location\"\n    @place_changed='setPlace'\n    style=\"width: 300px; height: 30%\"\n  >\n  </GMapAutocomplete>\n  <button\n      @click='addMarker'>Add\n  </button>\n  <button @click=\"geolocate\">Get Current Location</button>\n  <GMapMap\n      :center=\"center\"\n      :zoom=\"15\"\n      map-type-id=\"terrain\"\n      style=\"width: 100%; height: 300px\" \n  >\n    <GMapMarker\n      v-for=\"marker in markers\"\n      :key=\"marker.id\"\n      :position=\"marker.position\"\n    />\n  </GMapMap>\n</template>\n<script>\n\n\nimport { mapMutations, mapGetters } from 'vuex';\nexport default {\n  name: 'App',\n  data() {\n    return {\n      currentPlace: null,\n      timeZone: '',\n      utcOffset: -5,\n    }\n  },\n  computed: { \n    ...mapGetters(['getCenter', 'getMarker', 'getPlaces']),\n    center (){\n      return this.getCenter\n    },\n    markers () {\n      return this.getMarker\n    },\n    places (){\n      return this.getPlaces\n    },\n  },  \n  methods: {\n  ...mapMutations(['addMarkers', 'addPlaces', 'changeCenter']),\n  setPlace(place) {\n    this.currentPlace = place;\n  },\n  addMarker() {\n      if (this.currentPlace) {\n        const marker = {\n          lat: this.currentPlace.geometry.location.lat(),\n          lng: this.currentPlace.geometry.location.lng(),\n        };\n        \n        this.addMarkers(marker)\n        this.addPlaces(this.currentPlace) \n        this.changeCenter(marker)\n        this.utcOffset = this.currentPlace.utc_offset/60\n        this.getTimeZone()\n        this.currentPlace = null;\n      }\n    },\n  geolocate: function() {\n    navigator.geolocation.getCurrentPosition(position => {  \n      const current = {\n        lat: position.coords.latitude, lng: position.coords.longitude,\n      }\n      this.changeCenter(current)\n    });\n  },\n  getTimeZone() {\n      const timeZone = Intl.DateTimeFormat(undefined, {\n        timeZoneName: 'long',\n        timeZone: `ETC/GMT${this.utcOffset < 0 ? '-' : '+'}${Math.abs(\n          this.utcOffset\n        )}`,\n      }).resolvedOptions().timeZone;\n      this.timeZone = timeZone;\n    },\n},\n}\n</script>"],"mappings":";;;;;6DACEA,mBAAA,CAGM,cAFJA,mBAAA,CAAkC,WAA/B,cAAY,GAAAC,gBAAA,CAAGC,KAAA,CAAAC,SAAS,kBAC3BH,mBAAA,CAAgC,WAA7B,aAAW,GAAAC,gBAAA,CAAGC,KAAA,CAAAE,QAAQ,iB,GAE3BC,YAAA,CAKmBC,2BAAA;IAJjBC,WAAW,EAAC,mBAAmB;IAC9BC,eAAa,EAAEC,QAAA,CAAAC,QAAQ;IACxBC,KAAiC,EAAjC;MAAA;MAAA;IAAA;gDAGFX,mBAAA,CAES;IADJY,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEL,QAAA,CAAAM,SAAA,IAAAN,QAAA,CAAAM,SAAA,IAAAD,IAAA,CAAS;KAAE,MACvB,GACAd,mBAAA,CAAwD;IAA/CY,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEL,QAAA,CAAAO,SAAA,IAAAP,QAAA,CAAAO,SAAA,IAAAF,IAAA,CAAS;KAAE,sBAAoB,GAC/CT,YAAA,CAWUY,kBAAA;IAVLC,MAAM,EAAET,QAAA,CAAAS,MAAM;IACdC,IAAI,EAAE,EAAE;IACT,aAAW,EAAC,SAAS;IACrBR,KAAkC,EAAlC;MAAA;MAAA;IAAA;;sBAGA,MAAyB,E,kBAD3BS,mBAAA,CAIEC,SAAA,QAAAC,WAAA,CAHiBb,QAAA,CAAAc,OAAO,EAAjBC,MAAM;2BADfC,YAAA,CAIEC,qBAAA;QAFCC,GAAG,EAAEH,MAAM,CAACI,EAAE;QACdC,QAAQ,EAAEL,MAAM,CAACK"},"metadata":{},"sourceType":"module","externalDependencies":[]}